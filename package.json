{
  "name": "ts-decorator",
  "version": "1.0.0",
  "description": "* 源文件查看：[decorator.ts](./decorator.ts)\r * 编译后查看：[decorator.js](./decorator.js)\r ##  编译后的源码分析：\r * 方法装饰器声明在一个方法的声明之前（紧靠着方法声明）。 它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。 方法装饰器不能用在声明文件( .d.ts)，重载或者任何外部上下文（比如declare的类）中。\r * 方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：\r > 1. 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。\r > 2. 成员的名字。\r > 3. 成员的属性描述符。\r > * 装饰器的传入参数的时机？（单个修饰器、多个修饰器）\r ## 单个装饰器\r * 装饰器的作用有很多，比如可以应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义，一个简单的例子：[decorator.ts](./decorator.ts)，改变方法的定义。\r * methodDeractor内部return的函数才是ts所关心的装饰器，这个装饰器接收三个参数\r > 1. target 目标方法所属类（函数）的原型\r > 2. name 目标方法的名字\r > 3. descriptor 目标方法的属性描述符\r > * 那么这些参数是在什么时候被传递的呢？需看一下编译过后的js代码：[decorator.js](./decorator.js)\r * 可以说，装饰器是在类构造的时候就已经传值了，这也就意味着，装饰器不等类new出实例，直接执行，恰恰可以体现装饰器的作用，比如在类的构造阶段为类添加各种元数据进行装饰或者改变目标方法的定义等等\r ## 多个装饰器\r * 多个装饰器的使用如：\r * @a( ) @b( ) c( ) { someThing... }\r * 那么实际上是：a( b( c( ) ) )\r * a：evaluated，b：evaluated，b：called，a：called",
  "main": "decorator.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BambooHolla/ts-decorator.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/BambooHolla/ts-decorator/issues"
  },
  "homepage": "https://github.com/BambooHolla/ts-decorator#readme",
  "dependencies": {
    "reflect-metadata": "^0.1.12"
  }
}
